/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void terrain_col_red_change(GSlider source, GEvent event) { //_CODE_:terrain_col_red:842678:
} //_CODE_:terrain_col_red:842678:

public void terrain_col_green_change(GSlider source, GEvent event) { //_CODE_:terrain_col_green:953599:
} //_CODE_:terrain_col_green:953599:

public void terrain_col_blue_change(GSlider source, GEvent event) { //_CODE_:terrain_col_blue:838264:
} //_CODE_:terrain_col_blue:838264:

public void generate_click(GButton source, GEvent event) { //_CODE_:generate:570494:
  REQUIRED_LOCS = convertInt(min_normal);
  OPTIONAL_LOCS = convertInt(max_normal);
  NOISE_SEED = convertInt(noise_seed);
  RANDOM_SEED = convertInt(random_seed);
  MEAN = convertFloat(mean_normal);
  DEVIATION = convertFloat(deviation_normal);
  setTerrainCol();
  map.col = setColourCode();
  map.generate();
} //_CODE_:generate:570494:

public void terrain_list_click(GDropList source, GEvent event) { //_CODE_:terrain_list:402204:
  getTerrainCol();
} //_CODE_:terrain_list:402204:

public void noise_seed_change(GTextField source, GEvent event) { //_CODE_:noise_seed:691153:
} //_CODE_:noise_seed:691153:

public void terrain_shade_click(GCheckbox source, GEvent event) { //_CODE_:terrain_shade:717552:
} //_CODE_:terrain_shade:717552:

public void mean_normal_change(GTextField source, GEvent event) { //_CODE_:mean_normal:201024:
} //_CODE_:mean_normal:201024:

public void deviation_normal_change(GTextField source, GEvent event) { //_CODE_:deviation_normal:500003:
} //_CODE_:deviation_normal:500003:

public void terrain_grey_click(GCheckbox source, GEvent event) { //_CODE_:terrain_grey:491050:
} //_CODE_:terrain_grey:491050:

public void random_seed_change(GTextField source, GEvent event) { //_CODE_:random_seed:205239:
} //_CODE_:random_seed:205239:

public void min_normal_change(GTextField source, GEvent event) { //_CODE_:min_normal:983798:
} //_CODE_:min_normal:983798:

public void max_normal_change(GTextField source, GEvent event) { //_CODE_:max_normal:628663:
} //_CODE_:max_normal:628663:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setCursor(ARROW);
  surface.setTitle("Config");
  terrain_col_red = new GSlider(this, 0, 200, 400, 100, 30.0);
  terrain_col_red.setShowValue(true);
  terrain_col_red.setLimits(255, 0, 255);
  terrain_col_red.setNbrTicks(17);
  terrain_col_red.setStickToTicks(true);
  terrain_col_red.setShowTicks(true);
  terrain_col_red.setNumberFormat(G4P.INTEGER, 0);
  terrain_col_red.setLocalColorScheme(GCScheme.RED_SCHEME);
  terrain_col_red.setOpaque(true);
  terrain_col_red.addEventHandler(this, "terrain_col_red_change");
  terrain_col_green = new GSlider(this, 0, 300, 400, 100, 30.0);
  terrain_col_green.setShowValue(true);
  terrain_col_green.setLimits(255, 0, 255);
  terrain_col_green.setNbrTicks(17);
  terrain_col_green.setStickToTicks(true);
  terrain_col_green.setShowTicks(true);
  terrain_col_green.setNumberFormat(G4P.INTEGER, 0);
  terrain_col_green.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  terrain_col_green.setOpaque(true);
  terrain_col_green.addEventHandler(this, "terrain_col_green_change");
  terrain_col_blue = new GSlider(this, 0, 400, 400, 100, 30.0);
  terrain_col_blue.setShowValue(true);
  terrain_col_blue.setLimits(255, 0, 255);
  terrain_col_blue.setNbrTicks(17);
  terrain_col_blue.setStickToTicks(true);
  terrain_col_blue.setShowTicks(true);
  terrain_col_blue.setNumberFormat(G4P.INTEGER, 0);
  terrain_col_blue.setOpaque(true);
  terrain_col_blue.addEventHandler(this, "terrain_col_blue_change");
  generate = new GButton(this, 0, 500, 800, 100);
  generate.setText("Generate!");
  generate.setTextBold();
  generate.setLocalColorScheme(GCScheme.PURPLE_SCHEME);
  generate.addEventHandler(this, "generate_click");
  terrain_list = new GDropList(this, 0, 150, 400, 350, 6);
  terrain_list.setItems(loadStrings("list_terrain"), 0);
  terrain_list.setLocalColorScheme(GCScheme.PURPLE_SCHEME);
  terrain_list.addEventHandler(this, "terrain_list_click");
  noise_seed = new GTextField(this, 25, 50, 350, 25, G4P.SCROLLBARS_NONE);
  noise_seed.setText("0");
  noise_seed.setPromptText("32");
  noise_seed.setLocalColorScheme(GCScheme.PURPLE_SCHEME);
  noise_seed.setOpaque(true);
  noise_seed.addEventHandler(this, "noise_seed_change");
  noise_label = new GLabel(this, 25, 25, 350, 25);
  noise_label.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  noise_label.setText("Noise seed:");
  noise_label.setLocalColorScheme(GCScheme.PURPLE_SCHEME);
  noise_label.setOpaque(true);
  terrain_shade = new GCheckbox(this, 0, 100, 200, 50);
  terrain_shade.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  terrain_shade.setText("Shade terrain");
  terrain_shade.setLocalColorScheme(GCScheme.PURPLE_SCHEME);
  terrain_shade.setOpaque(false);
  terrain_shade.addEventHandler(this, "terrain_shade_click");
  terrain_shade.setSelected(true);
  mean_label = new GLabel(this, 425, 225, 150, 25);
  mean_label.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  mean_label.setText("Size mean:");
  mean_label.setLocalColorScheme(GCScheme.PURPLE_SCHEME);
  mean_label.setOpaque(true);
  mean_normal = new GTextField(this, 425, 250, 150, 25, G4P.SCROLLBARS_NONE);
  mean_normal.setText("50.0");
  mean_normal.setPromptText("32.0");
  mean_normal.setLocalColorScheme(GCScheme.PURPLE_SCHEME);
  mean_normal.setOpaque(true);
  mean_normal.addEventHandler(this, "mean_normal_change");
  deviation_label = new GLabel(this, 625, 225, 150, 25);
  deviation_label.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  deviation_label.setText("Size deviation:");
  deviation_label.setLocalColorScheme(GCScheme.PURPLE_SCHEME);
  deviation_label.setOpaque(true);
  deviation_normal = new GTextField(this, 625, 250, 150, 25, G4P.SCROLLBARS_NONE);
  deviation_normal.setText("10.0");
  deviation_normal.setPromptText("32.0");
  deviation_normal.setLocalColorScheme(GCScheme.PURPLE_SCHEME);
  deviation_normal.setOpaque(true);
  deviation_normal.addEventHandler(this, "deviation_normal_change");
  terrain_grey = new GCheckbox(this, 200, 100, 200, 50);
  terrain_grey.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  terrain_grey.setText("Greyscale colours");
  terrain_grey.setLocalColorScheme(GCScheme.PURPLE_SCHEME);
  terrain_grey.setOpaque(false);
  terrain_grey.addEventHandler(this, "terrain_grey_click");
  random_seed = new GTextField(this, 425, 50, 350, 25, G4P.SCROLLBARS_NONE);
  random_seed.setText("0");
  random_seed.setPromptText("32");
  random_seed.setLocalColorScheme(GCScheme.PURPLE_SCHEME);
  random_seed.setOpaque(true);
  random_seed.addEventHandler(this, "random_seed_change");
  random_label = new GLabel(this, 425, 25, 350, 25);
  random_label.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  random_label.setText("Random seed:");
  random_label.setLocalColorScheme(GCScheme.PURPLE_SCHEME);
  random_label.setOpaque(true);
  keyboard_pos = new GLabel(this, 400, 400, 400, 50);
  keyboard_pos.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  keyboard_pos.setText("Pos: (10000.0,10000.0)");
  keyboard_pos.setLocalColorScheme(GCScheme.PURPLE_SCHEME);
  keyboard_pos.setOpaque(false);
  keyboard_scale = new GLabel(this, 400, 450, 400, 50);
  keyboard_scale.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  keyboard_scale.setText("Scale: x0.010");
  keyboard_scale.setLocalColorScheme(GCScheme.PURPLE_SCHEME);
  keyboard_scale.setOpaque(false);
  min_label = new GLabel(this, 425, 325, 150, 25);
  min_label.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  min_label.setText("Required locations:");
  min_label.setLocalColorScheme(GCScheme.PURPLE_SCHEME);
  min_label.setOpaque(true);
  max_label = new GLabel(this, 625, 325, 150, 25);
  max_label.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  max_label.setText("Optional locations:");
  max_label.setLocalColorScheme(GCScheme.PURPLE_SCHEME);
  max_label.setOpaque(true);
  min_normal = new GTextField(this, 425, 350, 150, 25, G4P.SCROLLBARS_NONE);
  min_normal.setText("0");
  min_normal.setPromptText("32");
  min_normal.setLocalColorScheme(GCScheme.PURPLE_SCHEME);
  min_normal.setOpaque(true);
  min_normal.addEventHandler(this, "min_normal_change");
  max_normal = new GTextField(this, 625, 350, 150, 25, G4P.SCROLLBARS_NONE);
  max_normal.setText("0");
  max_normal.setPromptText("32");
  max_normal.setLocalColorScheme(GCScheme.PURPLE_SCHEME);
  max_normal.setOpaque(true);
  max_normal.addEventHandler(this, "max_normal_change");
}

// Variable declarations 
// autogenerated do not edit
GSlider terrain_col_red; 
GSlider terrain_col_green; 
GSlider terrain_col_blue; 
GButton generate; 
GDropList terrain_list; 
GTextField noise_seed; 
GLabel noise_label; 
GCheckbox terrain_shade; 
GLabel mean_label; 
GTextField mean_normal; 
GLabel deviation_label; 
GTextField deviation_normal; 
GCheckbox terrain_grey; 
GTextField random_seed; 
GLabel random_label; 
GLabel keyboard_pos; 
GLabel keyboard_scale; 
GLabel min_label; 
GLabel max_label; 
GTextField min_normal; 
GTextField max_normal; 
